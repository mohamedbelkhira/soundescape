datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For email/password auth
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts          Account[]
  sessions          Session[]
  listeningProgress ListeningProgress[]
  bookmarks         Bookmark[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Author {
  id          String   @id @default(cuid())
  name        String   @unique
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations - One author can have many audiobooks
  audiobooks Audiobook[]

  @@map("authors")
}

// Categories model
model Category {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  audiobooks AudiobookCategory[]

  @@map("categories")
}

// Junction table for many-to-many relationship
model AudiobookCategory {
  id          String @id @default(cuid())
  audiobookId String @map("audiobook_id")
  categoryId  String @map("category_id")

  // Relations
  audiobook Audiobook @relation(fields: [audiobookId], references: [id], onDelete: Cascade)
  category  Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([audiobookId, categoryId])
  @@map("audiobook_categories")
}

model Audiobook {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  coverUrl    String?  @map("cover_url")
  audioUrl    String   @map("audio_url") // Direct audio file path
  totalTime   Int?     @map("total_time") // Total duration in seconds
  isPublished Boolean  @default(false) @map("is_published")
  
  // Direct foreign key to author
  authorId    String   @map("author_id")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  author            Author              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  listeningProgress ListeningProgress[]
  categories        AudiobookCategory[]
  bookmarks         Bookmark[]

  @@map("audiobooks")
}

model ListeningProgress {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  audiobookId String   @map("audiobook_id")
  position    Int      // Current position in seconds
  completed   Boolean  @default(false)
  lastPlayed  DateTime @default(now()) @map("last_played")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  audiobook Audiobook @relation(fields: [audiobookId], references: [id], onDelete: Cascade)

  @@unique([userId, audiobookId])
  @@map("listening_progress")
}

model Bookmark {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  audiobookId String   @map("audiobook_id")
  position    Int      // Position in seconds
  title       String   // User-defined bookmark title
  note        String?  @db.Text // Optional note
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  audiobook Audiobook @relation(fields: [audiobookId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}

// Enums
enum Role {
  USER
  ADMIN
}